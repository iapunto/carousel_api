name: CI/CD Pipeline for Carousel API

on: 
  push:
    branches: [ main ]  # Ejecutar el workflow en cada push a la rama 'main'
  pull_request:
    branches: [ main ]  # También ejecutar en pull requests a la rama 'main'

jobs:
  build:
    runs-on: ubuntu-latest  # Sistema operativo en el que se ejecutará el trabajo
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:
      - uses: actions/checkout@v3  # Descargar el código del repositorio

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.6'  # Especifica la versión de Python que usas

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests (opcional)
        run: |
          export MODE=simulator  # Establece la variable de entorno MODE
          python -m unittest discover -s tests  # Ejecuta las pruebas unitarias (si las tienes)

      - name: Upload artifacts (opcional)
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: dist/
      
      - name: Generate coverage report
        run: |
          coverage run --source=carousel_api -m unittest discover -s tests
          coverage report -m
          coverage xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ '56d29ad3-d20c-488a-af76-91267bb93f95' }}     # Token de Codecov (configúralo en los secrets de tu repositorio)
          file: ./coverage.xml                    # Ruta al archivo de informe de cobertura generado
          flags: unittests                         # Etiqueta para identificar las pruebas unitarias
          name: codecov-umbrella                   # Nombre del informe en Codecov (opcional)
          fail_ci_if_error: true                   # Fallar el CI si hay un error al subir la cobertura